[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Blog",
    "section": "",
    "text": "I tried to predict the 2023 NCAA Tournament and it did not go well\n\n\n\n\n\n\n\nbasketball\n\n\nmachinelearning\n\n\nbracketology\n\n\n\n\n\n\n\n\n\n\n\nApr 25, 2023\n\n\nJack Yelden\n\n\n\n\n\n\n  \n\n\n\n\nPost With Code\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nApr 24, 2023\n\n\nHarlow Malloc\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nApr 21, 2023\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/ncaa-bracket-prediction-failure/index.html",
    "href": "posts/ncaa-bracket-prediction-failure/index.html",
    "title": "I tried to predict the 2023 NCAA Tournament and it did not go well",
    "section": "",
    "text": "During this semester, I have been tasked with building a Notebook of code to try and use Machine Learning to predict the March Madness tournament. As we know, it is notoriously difficult to determine which teams are going to win during the tournament, so being able to accurately predict even some games would make you a lot of money. I learned through my work that it is not as easy as it sounds to correctly predict the tournament. In the end, my model ended up predicting that Colgate would win the National Championship. Colgate was a 15 seed, meaning there were only four teams in the entire tournament that the selection committee felt were worse than Colgate. That being said, my model was supremely confident in them winning it all. They ended up losing by 20 in the first round to Texas. I think it is safe to say that my adventure in predicting the tournament was not a success, but I was still able to learn things that could end up helping me in the future.\nWe should first start by looking at my model and what I chose to use for it. I used four statistics in the model to try and predict which teams would win games. I knew that I wanted to have a shooting statistic and more specifically one that accounted for the fact that threes are worth more than twos. In the end, I settled on Effective Field Goal Percentage which places a combines 3-point field goal percentage and field goal percentage while placing a higher emphasis on 3-point field goal percentage. Using this data, I did find a general trend between better shooting and more wins, as one would expect. This graph shows that trend, comparing a team’s Effective Field Goal Percentage to their opponent’s.\n\n\nCode\nlibrary(tidyverse)\nlibrary(hoopR)\nlibrary(zoo)\nlibrary(tidymodels)\nlibrary(bonsai)\nlibrary(gt)\n\ngamesunbuilt &lt;- load_mbb_team_box(2015:2023)\n\nteamstats &lt;- gamesunbuilt %&gt;%\n  filter(game_date &lt; as.Date(\"2023-03-14\")) %&gt;%\n  mutate(\n    possessions = round(field_goals_attempted - offensive_rebounds + turnovers + (.475 * free_throws_attempted), digits = 0),\n    points_per_100 = (team_score/possessions)*100,\n    effective_field_goal_percent = ((field_goals_made + (0.5*three_point_field_goals_made))/field_goals_attempted),\n    blocks_steals = blocks + steals\n  ) %&gt;%\n  filter(possessions &lt;= 90 & possessions &gt;= 53)\n\nrollingteamstats &lt;- teamstats %&gt;%\n  arrange(game_date) %&gt;%\n  group_by(team_short_display_name, season) %&gt;%\n  mutate(\n    team_rolling_efg = rollmean(lag(effective_field_goal_percent, n=1), k=10, align = \"right\", fill=NA),\n    team_rolling_assists = rollmean(lag(assists, n=1), k=10, align = \"right\", fill=NA),\n    team_rolling_blocks_steals = rollmean(lag(blocks_steals, n=1), k=10, align = \"right\", fill=NA),\n    team_rolling_fouls = rollmean(lag(fouls, n=1), k=10, align = \"right\", fill=NA)\n  ) %&gt;%\n  ungroup()\n\n\nteam_side &lt;- rollingteamstats %&gt;%\n  select(\n    game_id,\n    team_id,\n    team_short_display_name,\n    opponent_team_id,\n    game_date,\n    season,\n    team_score,\n    fouls,\n    team_rolling_efg,\n    team_rolling_assists,\n    team_rolling_blocks_steals,\n    team_rolling_fouls\n    ) %&gt;%\n  na.omit() %&gt;%\n  rename(\n    team_fouls = fouls\n  )\nopponent_side &lt;- team_side %&gt;%\n  select(-opponent_team_id) %&gt;%\n  rename(\n    opponent_team_id = team_id,\n    opponent_short_display_name = team_short_display_name,\n    opponent_score = team_score,\n    opponent_fouls = team_fouls,\n    opponent_rolling_efg = team_rolling_efg,\n    opponent_rolling_assists = team_rolling_assists,\n    opponent_rolling_blocks_steals = team_rolling_blocks_steals,\n    opponent_rolling_fouls = team_rolling_fouls\n  ) \n\ngames &lt;- team_side %&gt;% inner_join(opponent_side)\n\n\ngames &lt;- games %&gt;% mutate(\n  team_result = as.factor(case_when(\n    team_score &gt; opponent_score ~ \"W\",\n    opponent_score &gt; team_score ~ \"L\"\n))) %&gt;% na.omit()\n\n\ngames$team_result &lt;- relevel(games$team_result, ref=\"W\")\n\n\nmodelgames &lt;- games %&gt;%\n  select(\n    game_id,\n    game_date,\n    team_short_display_name,\n    opponent_short_display_name,\n    season,\n    team_rolling_efg,\n    opponent_rolling_efg,\n    team_rolling_assists,\n    opponent_rolling_assists,\n    team_rolling_blocks_steals,\n    opponent_rolling_blocks_steals,\n    team_rolling_fouls,\n    opponent_rolling_fouls,\n    team_result\n    ) %&gt;% na.omit()\n\nggplot() + \n  geom_point(\n    data=games, aes(x=team_rolling_efg, y=opponent_rolling_efg, color=team_result)) +\n  labs(\n    title=\"Teams that are shooting better than their opponents generally win.\", \n    subtitle=\"It's not perfect, but there is a general correlation between shooting better than your opponent and winning more games\", \n    x=\"Team eFG%\", \n    y=\"Opponent eFG%\") +\n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    )\n\n\n\n\n\nAfter deciding on Effective Field Goal Percentage, I knew that I needed to have more. I decided to go fairly simple with the rest, opting to include assists, fouls and a combination of blocks and steals to round out my four predictors. I also knew that I wanted to do a rolling mean to determine each team’s value since some of these teams are wildly different than they were at the start of the season. I felt that the last 10 games was a good window to get an idea of how good a team was. For the majority of teams, this would include their conference tournaments which serve as a pre-cursor for the NCAA tournament. The next step was deciding which engine to use for my model.\n\n\nCode\ngame_split &lt;- initial_split(modelgames, prop = .8)\ngame_train &lt;- training(game_split)\ngame_test &lt;- testing(game_split)\n\ngame_recipe &lt;-\n  recipe(team_result ~ ., data = game_train) %&gt;%\n  update_role(game_id, game_date, team_short_display_name, opponent_short_display_name, season, new_role = \"ID\") %&gt;%\n  step_normalize(all_predictors())\n\nlightgbm_mod &lt;-\n  boost_tree() %&gt;%\n  set_engine(\"lightgbm\") %&gt;%\n  set_mode(\"classification\")\n\nlightgbm_workflow &lt;-\n  workflow() %&gt;%\n  add_model(lightgbm_mod) %&gt;%\n  add_recipe(game_recipe)\n\nlightgbm_fit &lt;-\n  lightgbm_workflow %&gt;%\n  fit(data = game_train)\n\n\nI wanted to test my model with multiple different engines to find out what would give me the most accuracy. I tried logistic regression, random forests, support vector machines and LightGBM. I did not want to use XGBoost, simply because it always took at least 20 minutes to run and when I was fine tuning my model, this was just far too long. After running the other four options, eventually LightGBM had the most accuracy. During my last few tests, my accuracy was always around 70% for the regular season testing data and around 65% for the regular season training data. This was not super strong which made me a little hesitant, but it was as good as I could achieve.\n\n\nCode\nrollingteamstats &lt;- teamstats %&gt;%\n  arrange(game_date) %&gt;%\n  group_by(team_short_display_name, season) %&gt;%\n  mutate(\n    team_rolling_efg = rollmean(effective_field_goal_percent, k=10, align = \"right\", fill=NA),\n    team_rolling_assists = rollmean(assists, k=10, align = \"right\", fill=NA),\n    team_rolling_blocks_steals = rollmean(blocks_steals, k=10, align = \"right\", fill=NA),\n    team_rolling_fouls = rollmean(fouls, k=10, align = \"right\", fill=NA)\n  ) %&gt;%\n  ungroup()\n\n\nteam_side &lt;- rollingteamstats %&gt;%\n  select(\n    game_id,\n    team_id,\n    team_short_display_name,\n    opponent_team_id,\n    game_date,\n    season,\n    team_score,\n    fouls,\n    team_rolling_efg,\n    team_rolling_assists,\n    team_rolling_blocks_steals,\n    team_rolling_fouls\n    ) %&gt;%\n  na.omit() %&gt;%\n  rename(\n    team_fouls = fouls\n  )\n\nopponent_side &lt;- team_side %&gt;%\n  select(-opponent_team_id) %&gt;%\n  rename(\n    opponent_id = team_id,\n    opponent_short_display_name = team_short_display_name,\n    opponent_score = team_score,\n    opponent_fouls = team_fouls,\n    opponent_rolling_efg = team_rolling_efg,\n    opponent_rolling_assists = team_rolling_assists,\n    opponent_rolling_blocks_steals = team_rolling_blocks_steals,\n    opponent_rolling_fouls = team_rolling_fouls\n  ) %&gt;%\n  mutate(\n    opponent_id = as.numeric(opponent_id)\n    )\n\ngames &lt;- team_side %&gt;% inner_join(opponent_side)\n\ngames &lt;- games %&gt;% mutate(\n  team_result = as.factor(case_when(\n    team_score &gt; opponent_score ~ \"W\",\n    opponent_score &gt; team_score ~ \"L\"\n))) %&gt;% na.omit()\n\ngames$team_result &lt;- relevel(games$team_result, ref=\"W\")\n\nmodelgames &lt;- games %&gt;%\n  select(\n    game_id,\n    game_date,\n    team_short_display_name,\n    opponent_short_display_name,\n    season,\n    team_rolling_efg,\n    opponent_rolling_efg,\n    team_rolling_assists,\n    opponent_rolling_assists,\n    team_rolling_blocks_steals,\n    opponent_rolling_blocks_steals,\n    team_rolling_fouls,\n    opponent_rolling_fouls,\n    team_result\n    ) %&gt;% na.omit()\n\nplayingames &lt;- tibble(\n  team_short_display_name=\"Texas A&M-CC\",\n  opponent_short_display_name=\"SE Missouri St\"\n) %&gt;% add_row(\n  team_short_display_name=\"Texas St\",\n  opponent_short_display_name=\"Fair Dickinson\"\n) %&gt;% add_row(\n  team_short_display_name=\"Arizona St\",\n  opponent_short_display_name=\"Nevada\"\n) %&gt;% add_row(\n  team_short_display_name=\"Pitt\",\n  opponent_short_display_name=\"Mississippi St\"\n) \n\nplayingames &lt;- modelgames %&gt;%\n  group_by(team_short_display_name) %&gt;%\n  filter(game_date == max(game_date) & season == 2023) %&gt;%\n  slice(1) %&gt;%\n  select(-team_result, -starts_with(\"opponent\")) %&gt;%\n  right_join(playingames)\n\nplayingames &lt;- modelgames %&gt;%\n  group_by(opponent_short_display_name) %&gt;%\n  filter(game_date == max(game_date) & season == 2023) %&gt;%\n  slice(1) %&gt;%\n  ungroup() %&gt;%\n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %&gt;%\n  right_join(playingames)\n\nplayin &lt;- lightgbm_fit %&gt;%\n  predict(new_data = playingames) %&gt;%\n  bind_cols(playingames) %&gt;%\n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nplayin &lt;- lightgbm_fit %&gt;%\n  predict(new_data = playingames, type=\"prob\") %&gt;%\n  bind_cols(playin) %&gt;%\n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\nAfter building out the model, I was finally ready to predict the games. My best performing region was the West region. This region ended up having all of the favored teams winning in the first round. my model was able to get five out of the eight match ups correct. That being said, this was where I had eventual champion UConn losing in the first round to Iona. Obviously that didn’t go well for me and I had UNC Asheville making a run to the Sweet 16, but outside of that, my bracket was decently accurate. I correctly had Gonzaga making it to the Elite 8 before losing. While not being perfect, it was much better than my East Region.\nMy most interesting region in the first round was the East. My model predicted that every single underdog would win. At the time, I was shocked that my model predicted Fairleigh Dickinson to pull off the upset of the tournament by beating Purdue, but lo and behold. My model also predicted Vermont would not only upset Marquette, but they would make a run to the Finals against Colgate. This not only did not happen, but they also lost in the first round. In the end, the only games that I accurately got in the East First Round were the Fairleigh Dickinson upset and the FAU upset against Memphis.\n\n\nCode\nsouthround1games &lt;- tibble(\n  team_short_display_name=\"Alabama\",\n  opponent_short_display_name=\"Texas A&M-CC\"\n) %&gt;% add_row(\n  team_short_display_name=\"Maryland\",\n  opponent_short_display_name=\"West Virginia\"\n) %&gt;% add_row(\n  team_short_display_name=\"San Diego St\",\n  opponent_short_display_name=\"Charleston\"\n) %&gt;% add_row(\n  team_short_display_name=\"Virginia\",\n  opponent_short_display_name=\"Furman\"\n) %&gt;% add_row(\n  team_short_display_name=\"Creighton\",\n  opponent_short_display_name=\"NC State\"\n) %&gt;% add_row(\n  team_short_display_name=\"Baylor\",\n  opponent_short_display_name=\"UCSB\"\n) %&gt;% add_row(\n  team_short_display_name=\"Missouri\",\n  opponent_short_display_name=\"Utah State\"\n) %&gt;% add_row(\n  team_short_display_name=\"Arizona\",\n  opponent_short_display_name=\"Princeton\"\n) \n\nsouthround1games &lt;- modelgames %&gt;%\n  group_by(team_short_display_name) %&gt;%\n  filter(game_date == max(game_date) & season == 2023) %&gt;%\n  slice(1) %&gt;%\n  select(-team_result, -starts_with(\"opponent\")) %&gt;%\n  right_join(southround1games)\n\nsouthround1games &lt;- modelgames %&gt;%\n  group_by(opponent_short_display_name) %&gt;%\n  filter(game_date == max(game_date) & season == 2023) %&gt;%\n  slice(1) %&gt;%\n  ungroup() %&gt;%\n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %&gt;%\n  right_join(southround1games)\n\nsouthround1 &lt;- lightgbm_fit %&gt;%\n  predict(new_data = southround1games) %&gt;%\n  bind_cols(southround1games) %&gt;%\n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nsouthround1 &lt;- lightgbm_fit %&gt;%\n  predict(new_data = southround1games, type=\"prob\") %&gt;%\n  bind_cols(southround1) %&gt;%\n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\neastround1games &lt;- tibble(\n  team_short_display_name=\"Purdue\",\n  opponent_short_display_name=\"Fair Dickinson\"\n) %&gt;% add_row(\n  team_short_display_name=\"Memphis\",\n  opponent_short_display_name=\"FAU\"\n) %&gt;% add_row(\n  team_short_display_name=\"Duke\",\n  opponent_short_display_name=\"Oral Roberts\"\n) %&gt;% add_row(\n  team_short_display_name=\"Tennessee\",\n  opponent_short_display_name=\"Louisiana\"\n) %&gt;% add_row(\n  team_short_display_name=\"Kentucky\",\n  opponent_short_display_name=\"Providence\"\n) %&gt;% add_row(\n  team_short_display_name=\"Kansas St\",\n  opponent_short_display_name=\"Montana St\"\n) %&gt;% add_row(\n  team_short_display_name=\"Michigan St\",\n  opponent_short_display_name=\"USC\"\n) %&gt;% add_row(\n  team_short_display_name=\"Marquette\",\n  opponent_short_display_name=\"Vermont\"\n) \n\neastround1games &lt;- modelgames %&gt;%\n  group_by(team_short_display_name) %&gt;%\n  filter(game_date == max(game_date) & season == 2023) %&gt;%\n  slice(1) %&gt;%\n  select(-team_result, -starts_with(\"opponent\")) %&gt;%\n  right_join(eastround1games)\n\neastround1games &lt;- modelgames %&gt;%\n  group_by(opponent_short_display_name) %&gt;%\n  filter(game_date == max(game_date) & season == 2023) %&gt;%\n  slice(1) %&gt;%\n  ungroup() %&gt;%\n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %&gt;%\n  right_join(eastround1games)\n\neastround1 &lt;- lightgbm_fit %&gt;%\n  predict(new_data = eastround1games) %&gt;%\n  bind_cols(eastround1games) %&gt;%\n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\neastround1 &lt;- lightgbm_fit %&gt;%\n  predict(new_data = eastround1games, type=\"prob\") %&gt;%\n  bind_cols(eastround1) %&gt;%\n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\n\nmidwestround1games &lt;- tibble(\n  team_short_display_name=\"Houston\",\n  opponent_short_display_name=\"N Kentucky\"\n) %&gt;% add_row(\n  team_short_display_name=\"Iowa\",\n  opponent_short_display_name=\"Auburn\"\n) %&gt;% add_row(\n  team_short_display_name=\"Miami\",\n  opponent_short_display_name=\"Drake\"\n) %&gt;% add_row(\n  team_short_display_name=\"Indiana\",\n  opponent_short_display_name=\"Kent State\"\n) %&gt;% add_row(\n  team_short_display_name=\"Iowa State\",\n  opponent_short_display_name=\"Pitt\"\n) %&gt;% add_row(\n  team_short_display_name=\"Xavier\",\n  opponent_short_display_name=\"Kennesaw St\"\n) %&gt;% add_row(\n  team_short_display_name=\"Texas A&M\",\n  opponent_short_display_name=\"Penn State\"\n) %&gt;% add_row(\n  team_short_display_name=\"Texas\",\n  opponent_short_display_name=\"Colgate\"\n) \n\nmidwestround1games &lt;- modelgames %&gt;%\n  group_by(team_short_display_name) %&gt;%\n  filter(game_date == max(game_date) & season == 2023) %&gt;%\n  slice(1) %&gt;%\n  select(-team_result, -starts_with(\"opponent\")) %&gt;%\n  right_join(midwestround1games)\n\nmidwestround1games &lt;- modelgames %&gt;%\n  group_by(opponent_short_display_name) %&gt;%\n  filter(game_date == max(game_date) & season == 2023) %&gt;%\n  slice(1) %&gt;%\n  ungroup() %&gt;%\n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %&gt;%\n  right_join(midwestround1games)\n\nmidwestround1 &lt;- lightgbm_fit %&gt;%\n  predict(new_data = midwestround1games) %&gt;%\n  bind_cols(midwestround1games) %&gt;%\n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nmidwestround1 &lt;- lightgbm_fit %&gt;%\n  predict(new_data = midwestround1games, type=\"prob\") %&gt;%\n  bind_cols(midwestround1) %&gt;%\n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\nwestround1games &lt;- tibble(\n  team_short_display_name=\"Kansas\",\n  opponent_short_display_name=\"Howard\"\n) %&gt;% add_row(\n  team_short_display_name=\"Arkansas\",\n  opponent_short_display_name=\"Illinois\"\n) %&gt;% add_row(\n  team_short_display_name=\"Saint Mary's\",\n  opponent_short_display_name=\"VCU\"\n) %&gt;% add_row(\n  team_short_display_name=\"UConn\",\n  opponent_short_display_name=\"Iona\"\n) %&gt;% add_row(\n  team_short_display_name=\"TCU\",\n  opponent_short_display_name=\"Nevada\"\n) %&gt;% add_row(\n  team_short_display_name=\"Gonzaga\",\n  opponent_short_display_name=\"Grand Canyon\"\n) %&gt;% add_row(\n  team_short_display_name=\"Northwestern\",\n  opponent_short_display_name=\"Boise St\"\n) %&gt;% add_row(\n  team_short_display_name=\"UCLA\",\n  opponent_short_display_name=\"UNC Asheville\"\n) \n\nwestround1games &lt;- modelgames %&gt;%\n  group_by(team_short_display_name) %&gt;%\n  filter(game_date == max(game_date) & season == 2023) %&gt;%\n  slice(1) %&gt;%\n  select(-team_result, -starts_with(\"opponent\")) %&gt;%\n  right_join(westround1games)\n\nwestround1games &lt;- modelgames %&gt;%\n  group_by(opponent_short_display_name) %&gt;%\n  filter(game_date == max(game_date) & season == 2023) %&gt;%\n  slice(1) %&gt;%\n  ungroup() %&gt;%\n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %&gt;%\n  right_join(westround1games)\n\nwestround1 &lt;- lightgbm_fit %&gt;%\n  predict(new_data = westround1games) %&gt;%\n  bind_cols(westround1games) %&gt;%\n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nwestround1 &lt;- lightgbm_fit %&gt;%\n  predict(new_data = westround1games, type=\"prob\") %&gt;%\n  bind_cols(westround1) %&gt;%\n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nwestround1 %&gt;% \n  select(team_short_display_name, .pred_class, .pred_W, opponent_short_display_name) %&gt;%\n  filter(team_short_display_name != 'Tennessee' | team_short_display_name != 'Kansas St')%&gt;%\n  gt() %&gt;% \n  cols_label(\n    team_short_display_name = \"Team\",\n    .pred_class = \"Prediction\",\n    .pred_W = \"Win Confidence\",\n    opponent_short_display_name = \"Opponent\"\n  ) %&gt;%\n  tab_header(\n    title = \"My West Region was my best performance\",\n    subtitle = \"In real life, all of the better seeds won and my model liked that.\"\n  ) %&gt;%  \n  tab_source_note(\n    source_note = md(\"**By:** Jack Yelden\")\n  ) %&gt;% \n  tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) %&gt;% \n  tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) %&gt;%\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) %&gt;%\n  opt_row_striping() %&gt;% \n  opt_table_lines(\"none\") %&gt;%\n    fmt_percent(\n    columns = c(.pred_W),\n    decimals = 1\n  )\n\n\n\n\n\n\n  \n    \n      My West Region was my best performance\n    \n    \n      In real life, all of the better seeds won and my model liked that.\n    \n    \n      Team\n      Prediction\n      Win Confidence\n      Opponent\n    \n  \n  \n    Northwestern\nW\n55.3%\nBoise St\n    Gonzaga\nW\n68.8%\nGrand Canyon\n    Kansas\nW\n59.0%\nHoward\n    Arkansas\nW\n63.1%\nIllinois\n    UConn\nL\n46.9%\nIona\n    TCU\nW\n56.3%\nNevada\n    UCLA\nL\n46.0%\nUNC Asheville\n    Saint Mary's\nL\n29.6%\nVCU\n  \n  \n    \n      By: Jack Yelden\n    \n  \n  \n\n\n\n\nThis also feels like a good time to point out that my model’s Final Four consisted of aforementioned Colgate and Vermont, along with Iona and Arizona. If you followed the tournament, you will know that the second biggest upset this year was 15 seed Princeton beating Arizona. After Iona also lost to UConn, I ended the first round with ZERO of my Final Four teams still playing. This was probably the worst part of my model, but I did have some good picks. Like I mentioned, my model did predict Purdue to get upset in the first round. It also had five seed Miami making a run to the Elite 8. They ended up making it all the way to the Final Four. I also had Xavier and Houston making the Sweet 16 in the Midwest along with Miami. Both of those teams ended up making it that far. My next best region was probably the West, where I ended up correctly predicting 5 out of 8 first round matchups. Barely over half is what I had to settle for this time.\nRound 2 Code:\n\n\nCode\nmidwestround2games &lt;- tibble(\n  team_short_display_name=\"Houston\",\n  opponent_short_display_name=\"Iowa\"\n) %&gt;% add_row(\n  team_short_display_name=\"Miami\",\n  opponent_short_display_name=\"Kent State\"\n) %&gt;% add_row(\n  team_short_display_name=\"Pitt\",\n  opponent_short_display_name=\"Xavier\"\n) %&gt;% add_row(\n  team_short_display_name=\"Penn State\",\n  opponent_short_display_name=\"Colgate\"\n) \n\nmidwestround2games &lt;- modelgames %&gt;%\n  group_by(team_short_display_name) %&gt;%\n  filter(game_date == max(game_date) & season == 2023) %&gt;%\n  slice(1) %&gt;%\n  select(-team_result, -starts_with(\"opponent\")) %&gt;%\n  right_join(midwestround2games)\n\nmidwestround2games &lt;- modelgames %&gt;%\n  group_by(opponent_short_display_name) %&gt;%\n  filter(game_date == max(game_date) & season == 2023) %&gt;%\n  slice(1) %&gt;%\n  ungroup() %&gt;%\n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %&gt;%\n  right_join(midwestround2games)\n\nmidwestround2 &lt;- lightgbm_fit %&gt;%\n  predict(new_data = midwestround2games) %&gt;%\n  bind_cols(midwestround2games) %&gt;%\n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nmidwestround2 &lt;- lightgbm_fit %&gt;%\n  predict(new_data = midwestround2games, type=\"prob\") %&gt;%\n  bind_cols(midwestround2) %&gt;%\n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\nsouthround2games &lt;- tibble(\n  team_short_display_name=\"Alabama\",\n  opponent_short_display_name=\"Maryland\"\n) %&gt;% add_row(\n  team_short_display_name=\"Charleston\",\n  opponent_short_display_name=\"Furman\"\n) %&gt;% add_row(\n  team_short_display_name=\"Creighton\",\n  opponent_short_display_name=\"UCSB\"\n) %&gt;% add_row(\n  team_short_display_name=\"Utah State\",\n  opponent_short_display_name=\"Arizona\"\n) \n\nsouthround2games &lt;- modelgames %&gt;%\n  group_by(team_short_display_name) %&gt;%\n  filter(game_date == max(game_date) & season == 2023) %&gt;%\n  slice(1) %&gt;%\n  select(-team_result, -starts_with(\"opponent\")) %&gt;%\n  right_join(southround2games)\n\nsouthround2games &lt;- modelgames %&gt;%\n  group_by(opponent_short_display_name) %&gt;%\n  filter(game_date == max(game_date) & season == 2023) %&gt;%\n  slice(1) %&gt;%\n  ungroup() %&gt;%\n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %&gt;%\n  right_join(southround2games)\n\nsouthround2 &lt;- lightgbm_fit %&gt;%\n  predict(new_data = southround2games) %&gt;%\n  bind_cols(southround2games) %&gt;%\n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nsouthround2 &lt;- lightgbm_fit %&gt;%\n  predict(new_data = southround2games, type=\"prob\") %&gt;%\n  bind_cols(southround2) %&gt;%\n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\nwestround2games &lt;- tibble(\n  team_short_display_name=\"Kansas\",\n  opponent_short_display_name=\"Arkansas\"\n) %&gt;% add_row(\n  team_short_display_name=\"VCU\",\n  opponent_short_display_name=\"Iona\"\n) %&gt;% add_row(\n  team_short_display_name=\"TCU\",\n  opponent_short_display_name=\"Gonzaga\"\n) %&gt;% add_row(\n  team_short_display_name=\"Northwestern\",\n  opponent_short_display_name=\"UNC Asheville\"\n) \n\nwestround2games &lt;- modelgames %&gt;%\n  group_by(team_short_display_name) %&gt;%\n  filter(game_date == max(game_date) & season == 2023) %&gt;%\n  slice(1) %&gt;%\n  select(-team_result, -starts_with(\"opponent\")) %&gt;%\n  right_join(westround2games)\n\nwestround2games &lt;- modelgames %&gt;%\n  group_by(opponent_short_display_name) %&gt;%\n  filter(game_date == max(game_date) & season == 2023) %&gt;%\n  slice(1) %&gt;%\n  ungroup() %&gt;%\n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %&gt;%\n  right_join(westround2games)\n\nwestround2 &lt;- lightgbm_fit %&gt;%\n  predict(new_data = westround2games) %&gt;%\n  bind_cols(westround2games) %&gt;%\n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nwestround2 &lt;- lightgbm_fit %&gt;%\n  predict(new_data = westround2games, type=\"prob\") %&gt;%\n  bind_cols(westround2) %&gt;%\n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\neastround2games &lt;- tibble(\n  team_short_display_name=\"Fair Dickinson\",\n  opponent_short_display_name=\"FAU\"\n) %&gt;% add_row(\n  team_short_display_name=\"Oral Roberts\",\n  opponent_short_display_name=\"Louisiana\"\n) %&gt;% add_row(\n  team_short_display_name=\"Providence\",\n  opponent_short_display_name=\"Montana St\"\n) %&gt;% add_row(\n  team_short_display_name=\"USC\",\n  opponent_short_display_name=\"Vermont\"\n) \n\neastround2games &lt;- modelgames %&gt;%\n  group_by(team_short_display_name) %&gt;%\n  filter(game_date == max(game_date) & season == 2023) %&gt;%\n  slice(1) %&gt;%\n  select(-team_result, -starts_with(\"opponent\")) %&gt;%\n  right_join(eastround2games)\n\neastround2games &lt;- modelgames %&gt;%\n  group_by(opponent_short_display_name) %&gt;%\n  filter(game_date == max(game_date) & season == 2023) %&gt;%\n  slice(1) %&gt;%\n  ungroup() %&gt;%\n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %&gt;%\n  right_join(eastround2games)\n\neastround2 &lt;- lightgbm_fit %&gt;%\n  predict(new_data = eastround2games) %&gt;%\n  bind_cols(eastround2games) %&gt;%\n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\neastround2 &lt;- lightgbm_fit %&gt;%\n  predict(new_data = eastround2games, type=\"prob\") %&gt;%\n  bind_cols(eastround2) %&gt;%\n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\nSweet 16 Code:\n\n\nCode\nmidwestround3games &lt;- tibble(\n  team_short_display_name=\"Houston\",\n  opponent_short_display_name=\"Miami\"\n) %&gt;% add_row(\n  team_short_display_name=\"Xavier\",\n  opponent_short_display_name=\"Colgate\"\n) \n\nmidwestround3games &lt;- modelgames %&gt;%\n  group_by(team_short_display_name) %&gt;%\n  filter(game_date == max(game_date) & season == 2023) %&gt;%\n  slice(1) %&gt;%\n  select(-team_result, -starts_with(\"opponent\")) %&gt;%\n  right_join(midwestround3games)\n\nmidwestround3games &lt;- modelgames %&gt;%\n  group_by(opponent_short_display_name) %&gt;%\n  filter(game_date == max(game_date) & season == 2023) %&gt;%\n  slice(1) %&gt;%\n  ungroup() %&gt;%\n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %&gt;%\n  right_join(midwestround3games)\n\nmidwestround3 &lt;- lightgbm_fit %&gt;%\n  predict(new_data = midwestround3games) %&gt;%\n  bind_cols(midwestround3games) %&gt;%\n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nmidwestround3 &lt;- lightgbm_fit %&gt;%\n  predict(new_data = midwestround3games, type=\"prob\") %&gt;%\n  bind_cols(midwestround3) %&gt;%\n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\nsouthround3games &lt;- tibble(\n  team_short_display_name=\"Alabama\",\n  opponent_short_display_name=\"Furman\"\n) %&gt;% add_row(\n  team_short_display_name=\"UCSB\",\n  opponent_short_display_name=\"Arizona\"\n) \n\nsouthround3games &lt;- modelgames %&gt;%\n  group_by(team_short_display_name) %&gt;%\n  filter(game_date == max(game_date) & season == 2023) %&gt;%\n  slice(1) %&gt;%\n  select(-team_result, -starts_with(\"opponent\")) %&gt;%\n  right_join(southround3games)\n\nsouthround3games &lt;- modelgames %&gt;%\n  group_by(opponent_short_display_name) %&gt;%\n  filter(game_date == max(game_date) & season == 2023) %&gt;%\n  slice(1) %&gt;%\n  ungroup() %&gt;%\n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %&gt;%\n  right_join(southround3games)\n\nsouthround3 &lt;- lightgbm_fit %&gt;%\n  predict(new_data = southround3games) %&gt;%\n  bind_cols(southround3games) %&gt;%\n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nsouthround3 &lt;- lightgbm_fit %&gt;%\n  predict(new_data = southround3games, type=\"prob\") %&gt;%\n  bind_cols(southround3) %&gt;%\n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\nwestround3games &lt;- tibble(\n  team_short_display_name=\"Kansas\",\n  opponent_short_display_name=\"Iona\"\n) %&gt;% add_row(\n  team_short_display_name=\"Gonzaga\",\n  opponent_short_display_name=\"UNC Asheville\"\n) \n\nwestround3games &lt;- modelgames %&gt;%\n  group_by(team_short_display_name) %&gt;%\n  filter(game_date == max(game_date) & season == 2023) %&gt;%\n  slice(1) %&gt;%\n  select(-team_result, -starts_with(\"opponent\")) %&gt;%\n  right_join(westround3games)\n\nwestround3games &lt;- modelgames %&gt;%\n  group_by(opponent_short_display_name) %&gt;%\n  filter(game_date == max(game_date) & season == 2023) %&gt;%\n  slice(1) %&gt;%\n  ungroup() %&gt;%\n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %&gt;%\n  right_join(westround3games)\n\nwestround3 &lt;- lightgbm_fit %&gt;%\n  predict(new_data = westround3games) %&gt;%\n  bind_cols(westround3games) %&gt;%\n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nwestround3 &lt;- lightgbm_fit %&gt;%\n  predict(new_data = westround3games, type=\"prob\") %&gt;%\n  bind_cols(westround3) %&gt;%\n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\neastround3games &lt;- tibble(\n  team_short_display_name=\"FAU\",\n  opponent_short_display_name=\"Oral Roberts\"\n) %&gt;% add_row(\n  team_short_display_name=\"Providence\",\n  opponent_short_display_name=\"Vermont\"\n) \n\neastround3games &lt;- modelgames %&gt;%\n  group_by(team_short_display_name) %&gt;%\n  filter(game_date == max(game_date) & season == 2023) %&gt;%\n  slice(1) %&gt;%\n  select(-team_result, -starts_with(\"opponent\")) %&gt;%\n  right_join(eastround3games)\n\neastround3games &lt;- modelgames %&gt;%\n  group_by(opponent_short_display_name) %&gt;%\n  filter(game_date == max(game_date) & season == 2023) %&gt;%\n  slice(1) %&gt;%\n  ungroup() %&gt;%\n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %&gt;%\n  right_join(eastround3games)\n\neastround3 &lt;- lightgbm_fit %&gt;%\n  predict(new_data = eastround3games) %&gt;%\n  bind_cols(eastround3games) %&gt;%\n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\neastround3 &lt;- lightgbm_fit %&gt;%\n  predict(new_data = eastround3games, type=\"prob\") %&gt;%\n  bind_cols(eastround3) %&gt;%\n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\nElite 8 Code:\n\n\nCode\nmidwestround4games &lt;- tibble(\n  team_short_display_name=\"Miami\",\n  opponent_short_display_name=\"Colgate\"\n) \n\nmidwestround4games &lt;- modelgames %&gt;%\n  group_by(team_short_display_name) %&gt;%\n  filter(game_date == max(game_date) & season == 2023) %&gt;%\n  slice(1) %&gt;%\n  select(-team_result, -starts_with(\"opponent\")) %&gt;%\n  right_join(midwestround4games)\n\nmidwestround4games &lt;- modelgames %&gt;%\n  group_by(opponent_short_display_name) %&gt;%\n  filter(game_date == max(game_date) & season == 2023) %&gt;%\n  slice(1) %&gt;%\n  ungroup() %&gt;%\n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %&gt;%\n  right_join(midwestround4games)\n\nmidwestround4 &lt;- lightgbm_fit %&gt;%\n  predict(new_data = midwestround4games) %&gt;%\n  bind_cols(midwestround4games) %&gt;%\n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nmidwestround4 &lt;- lightgbm_fit %&gt;%\n  predict(new_data = midwestround4games, type=\"prob\") %&gt;%\n  bind_cols(midwestround4) %&gt;%\n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\nsouthround4games &lt;- tibble(\n  team_short_display_name=\"Furman\",\n  opponent_short_display_name=\"Arizona\"\n) \n\nsouthround4games &lt;- modelgames %&gt;%\n  group_by(team_short_display_name) %&gt;%\n  filter(game_date == max(game_date) & season == 2023) %&gt;%\n  slice(1) %&gt;%\n  select(-team_result, -starts_with(\"opponent\")) %&gt;%\n  right_join(southround4games)\n\nsouthround4games &lt;- modelgames %&gt;%\n  group_by(opponent_short_display_name) %&gt;%\n  filter(game_date == max(game_date) & season == 2023) %&gt;%\n  slice(1) %&gt;%\n  ungroup() %&gt;%\n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %&gt;%\n  right_join(southround4games)\n\nsouthround4 &lt;- lightgbm_fit %&gt;%\n  predict(new_data = southround4games) %&gt;%\n  bind_cols(southround4games) %&gt;%\n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nsouthround4 &lt;- lightgbm_fit %&gt;%\n  predict(new_data = southround4games, type=\"prob\") %&gt;%\n  bind_cols(southround4) %&gt;%\n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\nwestround4games &lt;- tibble(\n  team_short_display_name=\"Iona\",\n  opponent_short_display_name=\"Gonzaga\"\n) \n\nwestround4games &lt;- modelgames %&gt;%\n  group_by(team_short_display_name) %&gt;%\n  filter(game_date == max(game_date) & season == 2023) %&gt;%\n  slice(1) %&gt;%\n  select(-team_result, -starts_with(\"opponent\")) %&gt;%\n  right_join(westround4games)\n\nwestround4games &lt;- modelgames %&gt;%\n  group_by(opponent_short_display_name) %&gt;%\n  filter(game_date == max(game_date) & season == 2023) %&gt;%\n  slice(1) %&gt;%\n  ungroup() %&gt;%\n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %&gt;%\n  right_join(westround4games)\n\nwestround4 &lt;- lightgbm_fit %&gt;%\n  predict(new_data = westround4games) %&gt;%\n  bind_cols(westround4games) %&gt;%\n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nwestround4 &lt;- lightgbm_fit %&gt;%\n  predict(new_data = westround4games, type=\"prob\") %&gt;%\n  bind_cols(westround4) %&gt;%\n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\neastround4games &lt;- tibble(\n  team_short_display_name=\"Oral Roberts\",\n  opponent_short_display_name=\"Vermont\"\n) \n\neastround4games &lt;- modelgames %&gt;%\n  group_by(team_short_display_name) %&gt;%\n  filter(game_date == max(game_date) & season == 2023) %&gt;%\n  slice(1) %&gt;%\n  select(-team_result, -starts_with(\"opponent\")) %&gt;%\n  right_join(eastround4games)\n\neastround4games &lt;- modelgames %&gt;%\n  group_by(opponent_short_display_name) %&gt;%\n  filter(game_date == max(game_date) & season == 2023) %&gt;%\n  slice(1) %&gt;%\n  ungroup() %&gt;%\n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %&gt;%\n  right_join(eastround4games)\n\neastround4 &lt;- lightgbm_fit %&gt;%\n  predict(new_data = eastround4games) %&gt;%\n  bind_cols(eastround4games) %&gt;%\n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\neastround4 &lt;- lightgbm_fit %&gt;%\n  predict(new_data = eastround4games, type=\"prob\") %&gt;%\n  bind_cols(eastround4) %&gt;%\n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\nFinal Four Code:\n\n\nCode\nfinalfourgames &lt;- tibble(\n  team_short_display_name=\"Arizona\",\n  opponent_short_display_name=\"Vermont\"\n) %&gt;% add_row(\n  team_short_display_name=\"Colgate\",\n  opponent_short_display_name=\"Iona\"\n) \n\nfinalfourgames &lt;- modelgames %&gt;%\n  group_by(team_short_display_name) %&gt;%\n  filter(game_date == max(game_date) & season == 2023) %&gt;%\n  slice(1) %&gt;%\n  select(-team_result, -starts_with(\"opponent\")) %&gt;%\n  right_join(finalfourgames)\n\nfinalfourgames &lt;- modelgames %&gt;%\n  group_by(opponent_short_display_name) %&gt;%\n  filter(game_date == max(game_date) & season == 2023) %&gt;%\n  slice(1) %&gt;%\n  ungroup() %&gt;%\n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %&gt;%\n  right_join(finalfourgames)\n\nfinalfour &lt;- lightgbm_fit %&gt;%\n  predict(new_data = finalfourgames) %&gt;%\n  bind_cols(finalfourgames) %&gt;%\n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nfinalfour &lt;- lightgbm_fit %&gt;%\n  predict(new_data = finalfourgames, type=\"prob\") %&gt;%\n  bind_cols(finalfour) %&gt;%\n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\nchampionshipgames &lt;- tibble(\n  team_short_display_name=\"Colgate\",\n  opponent_short_display_name=\"Vermont\"\n) \n\nchampionshipgames &lt;- modelgames %&gt;%\n  group_by(team_short_display_name) %&gt;%\n  filter(game_date == max(game_date) & season == 2023) %&gt;%\n  slice(1) %&gt;%\n  select(-team_result, -starts_with(\"opponent\")) %&gt;%\n  right_join(championshipgames)\n\nchampionshipgames &lt;- modelgames %&gt;%\n  group_by(opponent_short_display_name) %&gt;%\n  filter(game_date == max(game_date) & season == 2023) %&gt;%\n  slice(1) %&gt;%\n  ungroup() %&gt;%\n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %&gt;%\n  right_join(championshipgames)\n\nchampionship &lt;- lightgbm_fit %&gt;%\n  predict(new_data = championshipgames) %&gt;%\n  bind_cols(championshipgames) %&gt;%\n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nchampionship &lt;- lightgbm_fit %&gt;%\n  predict(new_data = championshipgames, type=\"prob\") %&gt;%\n  bind_cols(championship) %&gt;%\n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\nIn the end, I finished with 360 points overall. This was good enough to put me in 16.5 MILLIONTH place in the country. I was in the 18th Percentile across all brackets. That being said, I filled out a bracket with the teams that I actually thought would win games and it scored me the exact same amount of points. This year’s tournament was filled with upsets and was consequently very hard to predict. I am disappointed with my model’s performance, but I know that this year especially, it was hard to predict the tournament. In the future, I would love to look more at quality of opponents and strength of schedule. The biggest problem is that most of these teams don’t play each other during the year. This leads to questions about how good a team really is against what their numbers say. This was a very fun assignment and I will definitely use what I learned through this process next year to try and predict another tournament. Below are images of my final filled out bracket.\n\n\n\nMy predictions for the South & Midwest Regions\n\n\n\n\n\nMy predictions for the East & West Regions\n\n\n\n\n\nMy prediction for the Final Four"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  }
]